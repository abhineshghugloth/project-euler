#Each new term in the Fibonacci sequence is generated by adding the previous two terms.
#Starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89.

#Every positive integer can be uniquely written as a sum of nonconsecutive terms of the Fibonacci sequence. For example, 100 = 3 + 8 + 89.
#Such a sum is called the Zeckendorf representation of the number.

#For any integer n>0, let z(n) be the number of terms in the Zeckendorf representation of n.
#Thus, z(5) = 1, z(14) = 2, z(100) = 3 etc.
#Also, for 0<n<10^6, ∑ z(n) = 7894453.

#Find ∑ z(n) for 0<n<10^17.
fib_num = 100
fib = [1,2]
for n in xrange(fib_num):
  fib.append(fib[-1]+fib[-2])

def closest_fib_index(n):
  i = 0
  while fib[i] <= n:
    i += 1
  return i-1

sum_for_fib = [1,2,3]
for n in xrange(3,len(fib)):
  sum_for_fib.append(sum_for_fib[-1]+sum_for_fib[-2]-1+fib[n]-fib[n-1])

def solve_for(n):
  if n == 0:
    return 0
  i = closest_fib_index(n)
  f = fib[i]
  return sum_for_fib[i] + (n-f) + solve_for(n-f)

n = 10^17-1
print solve_for(n)