# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# 
# Let us list the factors of the first seven triangle numbers:
# 
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
# 
# We can see that 28 is the first triangle number to have over five divisors.
# 
# What is the value of the first triangle number to have over five hundred divisors?
class Array
	def count(x)
		self.inject(0) {|sum, y| (x==y)?(sum+1):(sum)}
	end

	def count_and_join
		self.uniq.collect{|x| [x,self.count(x)]}
	end
end

def each_triangle_number
	sum = 0
	counter = 1
	while true
		sum += counter
		counter += 1
		yield(sum)
	end
end

def first_divisor(num)
	(2..num).each {|i| return i if num % i == 0} 
end

def ultra_naive_factor(num)
	return [] if (num == 1 or num == 0)
	factors = []
	factors << first_divisor(num)
	factors += ultra_naive_factor(num / factors.first)
	return factors
end

class Integer
	def num_divisors
		ultra_naive_factor(self).count_and_join.inject(1){|prod, x| prod * (x[1]+1)}
	end
end

each_triangle_number do |x|
	if x.num_divisors > 500
		puts x
		break
	end
end


